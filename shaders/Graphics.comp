
FloatT sdCircle(Vec2T collidee_pos, Vec2T collider_pos, FloatT radius) {
    //Vec2T dist_collidee_to_colliderCenter = collidee_pos - collider_pos;
    //return length(dist_collidee_to_colliderCenter) - radius;
    return distance(collidee_pos, collider_pos) - radius;
}
FloatT sdLine(Vec2T collideeP_pos, Vec2T colliderA_pos, Vec2T colliderB_pos, Vec2T radius) {
    Vec2T B_to_A = colliderB_pos - colliderA_pos; // Vector from A to B
    Vec2T P_to_A = collideeP_pos - colliderA_pos; // Vector from A to the point P
    // Calculate the ratio of the projection of P onto the line AB
    FloatT ratio_B0_to_A1 = clamp(dot(P_to_A, B_to_A) / dot(B_to_A, B_to_A), FloatT(0.0), FloatT(1.0));
    // Calculate the point on the line segment
    Vec2T line_at_0 = B_to_A * ratio_B0_to_A1;
    // Return the signed distance from point P to the line segment
    return length(P_to_A - line_at_0) - mix(radius.x, radius.y, ratio_B0_to_A1);
}
// Source for hsv2rgb() and hsv2rgb_smooth() by Inigo Quilez ( https://www.shadertoy.com/view/MsS3Wc )
// Official HSV to RGB conversion (Domain & Range: 0 to 1)
Vec3T hsv2rgb( in Vec3T c )
{
    Vec3T rgb = clamp( abs(mod(c.x*6.0+Vec3T(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );
	return c.z * mix( Vec3T(1.0), rgb, c.y);
}
// Smooth HSV to RGB conversion 
Vec3T hsv2rgb_smooth( in Vec3T c )
{
    Vec3T rgb = clamp( abs(mod(c.x*6.0+Vec3T(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );
	rgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing	
	return c.z * mix( Vec3T(1.0), rgb, c.y);
}
